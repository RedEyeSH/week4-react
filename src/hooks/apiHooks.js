import { useEffect, useState, useCallback } from 'react';
import { fetchData } from '../utils/fetchData.js';

const useMedia = () => {
   const [mediaArray, setMediaArray] = useState([]);

   useEffect(() => {
      const getMedia = async () => {
         try {
            const json = await fetchData(import.meta.env.VITE_MEDIA_API + '/media');

            const userData = await Promise.all(json.map(async (item) => {
               try {
                  const result = await fetchData(import.meta.env.VITE_AUTH_API + '/users/' + item.user_id);
                  return result;
               } catch (error) {
                  console.log("Error fetching data:", error);
                  }
               })
            );
         
            const newData = json.map((item) => {
            const result = userData.find(({user_id}) => user_id === item.user_id);
            return {...item, username: result.username};
         });

         setMediaArray(newData);
         } catch (error) {
            console.error("Failed to fetch:", error);
         }
      };
      getMedia();
   }, []);

   const postMedia = async (file, inputs, token) => {
      // TODO: create a suitable object for Media API: without media_id, user_id, thumbnail and created_at. All those are generated by the API. See the media API documentation.
      const data = {
         ...inputs,
         ...file
      }
   
      // TODO: post the data to Media API and get the data as MediaResponse
      const fetchOptions = {
         method: "POST",
         headers: {
            Authorization: `Bearer ${token}`,
            'Content-Type': 'application/json'
         },
         body: JSON.stringify(data)
      }
      // TODO: return the data
      return await fetchData(import.meta.env.VITE_MEDIA_API + '/media', fetchOptions)
      
   };

   return { mediaArray, postMedia };
};

const useAuthentication = () => {
   const postLogin = async (inputs) => {
     const fetchOptions = {
       method: 'POST',
       headers: {
         'Content-Type': 'application/json',
       },
       body: JSON.stringify(inputs),
     };
     const loginResult = await fetchData(
       import.meta.env.VITE_AUTH_API + '/auth/login',
       fetchOptions,
     );
 
     console.log('loginResult', loginResult.token);
 
     window.localStorage.setItem('token', loginResult.token);
 
     return loginResult;
   };
 
   return { postLogin };
 };
 
 const useUser = () => {
   const postUser = async (inputs) => {
      const fetchOptions = {
         method: 'POST',
         headers: {
            'Content-Type': 'application/json',
         },
         body: JSON.stringify(inputs),
     };
     return await fetchData(
       import.meta.env.VITE_AUTH_API + '/users',
       fetchOptions,
     );
   };
 
   const getUserByToken = useCallback(async (token) => {
     const fetchOptions = {
      headers: {
         Authorization: 'Bearer: ' + token,
      },
     };
 
     const userResult = await fetchData(
      import.meta.env.VITE_AUTH_API + '/users/token',
      fetchOptions,
     );
 
     console.log('userResult', userResult);
 
     return userResult;
   }, []);
 
   return { getUserByToken, postUser };
};

const useFile = () => {
   const postFile = async (file, token) => {
      // TODO: create FormData object
      const formData = new FormData();
      // TODO: add file to FormData
      formData.append('file', file);
      // TODO: upload the file to file server and get the file data (url = import.meta.env.VITE_UPLOAD_SERVER + '/upload')
      // TODO: return the file data.
      const fetchOptions = {
         method: "POST",
         headers: {
            Authorization: `Bearer ${token}`
         },
         mode: 'cors',
         body: formData
      }

      return await fetchData(import.meta.env.VITE_UPLOAD_SERVER + '/upload', fetchOptions);
   }

   return { postFile }
}

export { useMedia, useAuthentication, useUser, useFile };